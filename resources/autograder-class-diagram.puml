@startuml autograder

package autograder {
    class Main {
        -{static} {final} INCORRECT_ARGUMENTS: String
        -{static} {final} INVALID_CONFIG_FILE: String
        -{static} {final} INVALID_METADATA_FILE: String
        -{static} configObject: JSONObject
        -{static} metadataObject: JSONObject
        +{static} main(args: String[]): void
        -{static} checkArgs(args: String[]): void
        -{static} parseConfiguration(): void
        -{static} runTests(): void
    }
    class Configuration {
        -{static} {final} EXCLUDED_CLASSES: Set<String>
        -{static} {final} OUTPUT_FILE: String
        ~{static} instance: Configuration
        -{final} classes: Set<Class>
        -{final} testWeights: Map<String, Double>
        -{final} numTestsToDrop: Map<String, Integer>
        -scoreCalculator: ScoreCalculator
        -configObject: JSONObject
        -metadataObject: JSONObject
        -autograderType: String
        -maxScore: Double
        -extraCreditTests: int
        -testTimeoutSeconds: int
        -starterCodeDownload: String
        -testVisibility: Visibility
        -Configuration()
        ~{static} build(configObject: JSONObject, metadataObject: JSONObject): void
        -parseAutograderType(): void
        -parseMaxScore(): void
        -parseExtraCreditTests(): void
        -parseTestTimeoutSeconds(): void
        -parseStarterCodeDownload(): void
        -parseTestVisibility(): void
        -parseClasses(): void
        -prepareScoreCalculator(): void
        ~writeToOutput(json: JSONObject): void
        ~getMaxScore(): double
        ~getExtraCreditTests(): int
        ~getTestTimeoutSeconds(): int
        ~getStarterCodeDownload(): String
        ~getTestVisibility(): String
        ~getClasses(): Set<Class>
        ~getTestWeights(): Map<String, Double>
        ~getNumTestsToDrop(): Map<String, Integer>
        ~getScoreCalculator(): ScoreCalculator
        ~getCalculationType(): String
        ~getExcludedClasses(): Set<String>
    }
    class ClassFinder {
        -{static} {final} PACKAGE_SEPARATOR: char
        -{static} {final} DIRECTORY_SEPARATOR: char
        -{static} {final} CLASS_FILE_EXTENSION: String
        -{static} {final} PACKAGE_ERROR: String
        ~{static} find(packageName: String): Set<Class>
        -{static} find(location: File, packageName: String): Set<Class>
    }
    class Runner {
        -{final} runners: Set<TestRunner>
        ~Runner(classes: Set<Class>)
        ~addRunners(): void
        -isClassExcluded(testClass: String): boolean
        ~runTests(): void
    }
    class TestRunner {
        -{static} {final} OUTPUT_FILE: String
        -{static} isFirstRun: boolean
        -{static} numRunners: int
        -{static} numCompleted: int
        -{static} totalTestsExecuted: int
        -{static} totalTestsFailed: int
        -{static} outputWriter: PrintWriter
        -{final} calculationType: String
        -numTestsExecuted: int
        -numTestsFailed: int
        ~TestRunner(testClass: Class, calculationType: String)
        #methodBlock(method: FrameworkMethod): Statement
        +run(junitRunner: RunNotifier): void
        -writeStartMessage(): void
        -buildRunNotifier(junitRunner: RunNotifier): RunNotifier
        -decrementTotalTestFailed(int numDecrease): void
        -writePercentagePassed(): void
        -writeEndMessage(): void
    }
    class Results {
        ~{static} instance: Results
        -{final} testResults: Map<String, TestData>
        -{final} testCounts: Map<String, Integer>
        -outputMessage: OutputMessage
        ~Results()
        ~addTest(name: String, visibility: Visibility): void
        ~addTestResult(name: String, numTests: int, numFailed: int): void
        ~addTestFailure(name: String, output: String): void
        ~toJson(): void
        -createDownloadLink(tests: JSONArray): void
        -writeGlobalResults(json: JSONObject, tests: JSONArray, score: double): void
    }
    class TestData {
        -{final} name: String
        -{final} outputText: StringBuilder
        -maxScore: double
        -score: double
        -visibility: Visibility
        ~TestData(name: String, visibility: Visibility)
        ~setTestVisible(): void
        ~setMaxScore(maxScore: double): void
        ~setScore(score: double): void
        ~appendToOutput(output: String): void
        ~getMaxScore(): double
        ~getScore(): double
        ~getName(): String
        ~getOutputText(): String
        ~getVisibility(): Visibility
    }
    enum Visibility {
        HIDDEN
        AFTER_DUE_DATE
        AFTER_PUBLISHED
        VISIBLE
        -{final} key: String
        -Visibility(key: String)
        ~{static} getVisibility(key: String): Visibility
        ~getValue(): String
    }
    enum OutputMessage {
        DEFAULT
        TEST_RUNNER_FAILED
        -{final} message: String
        -OutputMessage(message: String)
        ~getValue(): String
    }

    package calc {
        abstract class ScoreCalculator {
            #testCounts: Map<String, Integer>
            #score: double
            #totalPossibleScore: double
            #packageName: string
            #extraCreditTests: int
            #ScoreCalculator(totalPossibleScore: double)
            +{abstract} parseTestResults(tests: Set<TestData>): JSONArray
            +{abstract} getScore(): double
            +setTestCounts(testCounts: Map<String, Integer>): void
            +setPackageName(packageName: string): void
            +setExtraCreditTests(extraCreditTests: int): void
            #toJsonObject(testData: TestData): JSONObject
        }
        class DropLowestScoreCalculator extends ScoreCalculator {
            -{final} testWeights: Map<String, Double>
            -{final} numTestsToDrop: Map<String, Integer>
            +DropLowestScoreCalculator(testWeights: Map<String, Double>, numTestsToDrop: Map<String, Integer>)
            +parseTestResults(tests: Set<TestData>): JSONArray
            +getScore(): double
        }
        class PackageWeightScoreCalculator extends ScoreCalculator {
            -{final} testWeights: Map<String, Double>
            +PackageWeightScoreCalculator(testWeights: Map<String, Double>)
            +parseTestResults(tests: Set<TestData>): JSONArray
            +getScore(): double
        }
        class TestCountScoreCalculator extends ScoreCalculator {
            -testsRun: double
            -testsPassed: double
            +TestCountScoreCalculator(totalPossibleScore: double)
            +parseTestResults(tests: Set<TestData>): JSONArray
            +getScore(): double
        }
    }
}

Main ..> Configuration
Main ..> Runner
Configuration --> Configuration : <<singleton>>
Configuration --> ScoreCalculator
Configuration -l-> Visibility
Configuration .l.> ClassFinder
Runner --> "*" TestRunner
Runner ..> Configuration
TestRunner ..> Configuration
Runner ..> Results
Results --> Results : <<singleton>>
Results --> "*" TestData
Results -u-> OutputMessage
Results ..> Visibility
Results ..> Configuration
Results ..> ScoreCalculator
TestData --> Visibility
ScoreCalculator .u.> TestData